#include<iostream>
using namespace std;

struct Node
{
    char data;
    struct Node* next;
} *top=NULL;

// Function Prototypes
void push(char x);
char pop();
void Display();
char Peek(int index);

//---------------------------------------- Paranthesis Matching-------------//

int isBalanced_ParanthesisMatch(char *exprn)
{
    for(int i=0; exprn[i] !='\0'; i++)
    {
        if( exprn[i] == '(' || exprn[i] == '{' || exprn[i] == '[') 
        {
            push(exprn[i]);
        }
        else if( exprn[i] == ')' || exprn[i] == '}' || exprn[i] == ']')
        {
            if(top==NULL) return 0; // fail
            char x= pop();
            //check match
            if(x=='(' && exprn[i] != ')') return 0;
            if(x=='[' && exprn[i] != ']') return 0;
            if(x=='{' && exprn[i] != '}') return 0;
        }
    }
    if(top==NULL) return 1; // pass
    else return 0; // fail
}

int main()
{
    char *exprn1 = " ((a+b)*(c-d))) ";
    cout<<"Paranthesis Matched ? "<<isBalanced_ParanthesisMatch(exprn1)<<endl;
    
    char *exprn2 = " {([a+b]*[c-d])/e} ";
    cout<<"Paranthesis Matched ? "<<isBalanced_ParanthesisMatch(exprn2)<<endl;
    return 0;
}

void push(char x) //------------------------------------------------------------Pop
{
    struct Node *t=(struct Node*)malloc(sizeof(struct Node));
    if(t==NULL) cout<<"Memory Full"<<endl;
    else
    {
        t->data = x;
        t->next = top;
        top=t;
    }
}

char pop() //-------------------------------------------------------------------Pop
{
    char x=-1;
    if(top==NULL) cout<<"Stack Empty"<<endl;
    else
    {
        struct Node *t=top;
        x=top->data;
        top=top->next;
        free(t);
    }
    return x;
}

void Display() //---------------------------------------------------------------Display
{
    struct Node *p = top;
    while(p)
    {
        cout<<p->data<<" ";
        p=p->next;
    }
    cout<<endl;
}

char Peek(int index) //---------------------------------------------------------Peek
{
    struct Node *p=top;
    while(p && index-1>0) 
    {
        p=p->next; index--;
    }
    if(p) return p->data;
    else return -1;
}
